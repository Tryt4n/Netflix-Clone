@use "../../abstracts/colors" as c;
@use "../../abstracts/variables" as v;
@use "../../base/breakpoints" as b;
@use "../../base/functions" as func;
@use "../../abstracts/mixins" as *;

.user-settings {
  $img-max-width: func.rem(180);
  $img-min-width: func.rem(80);
  $img-width: 8vw;

  &__wrapper {
    max-width: func.rem(720);
    margin-inline: auto;
    margin-block: 4.5rem 2.5rem;
    font-size: v.$font-size-user-settings-page-text;
    @media screen and (width <= b.$mobile-small) {
      padding-inline: 1rem;
    }
    @media screen and (width <= b.$mobile) and (width > b.$mobile-small) {
      padding-inline: 2rem;
    }
    @media screen and (width > b.$mobile) {
      padding-inline: 2rem;
    }
  }

  &__header {
    font-size: v.$profile-settings-header;
    font-weight: 500;
    color: c.$white;
    margin-bottom: 0.1em;
  }

  &__container {
    margin-block: v.$font-size-user-settings-page-section-heading;
    display: flex;
    gap: 1rem;
  }

  &__image-edit {
    position: relative;
    height: fit-content;
  }

  &__img {
    max-width: $img-max-width;
    min-width: $img-min-width;
    width: $img-width;
    aspect-ratio: 1/1;
    border-radius: 0.25em;
  }

  &__edit-btn {
    position: absolute;
    width: 30%;
    bottom: 0;
    padding: func.rem(6);
    border: none;
    border-radius: 50%;
    outline: none;
    background-color: transparent;
    color: c.$white;
    cursor: pointer;
    & svg {
      width: 100%;
      min-width: func.rem(18);
      aspect-ratio: 1/1;
      background-color: c.$black;
      padding: 0.1rem;
      border-radius: 50%;
      outline-offset: 0.15rem;
    }
    &:focus svg {
      outline: auto;
    }
  }

  &__input {
    width: 100%;
    outline: none;
    border: func.rem(1) solid transparent;
    padding-inline: 0.6em;
    padding-block: 0.4em 0.2em;
    background-color: c.$profile-edit-create-game-handle-bg;
    font-size: v.$font-size-user-settings-page-section-heading;
    color: c.$white;
    line-height: 1.5em;
    &::placeholder {
      color: hsl(0, 0%, 80%);
    }

    &.invalid {
      border-color: c.$error-message;
    }
    &.available {
      border-color: c.$available-color;
    }
  }
  &__invalid-message {
    color: c.$error-message;
    font-size: v.$font-size-user-settings-page-warning-text;
  }

  &__section-heading {
    margin-block: 1em;
    font-size: v.$font-size-user-settings-page-section-heading;
    font-weight: 500;
    color: c.$bg;
  }

  &__language-select-heading {
    margin-bottom: 0.25em;
  }

  &__language-label-btn {
    position: relative;
    margin-bottom: v.$font-size-user-settings-page-section-heading;
    padding-left: 0.65em;
    padding-right: calc(0.65em * 5);
    background-color: c.$black;
    border-color: c.$white;
    font: inherit;
    font-weight: 500;
    line-height: 1.5em;
    color: c.$white;
    cursor: pointer;
    &:where(:hover, :focus-visible) {
      background-color: hsla(0, 0%, 100%, 0.1);
    }
  }

  &__language-select-list {
    position: absolute;
    margin-right: 1rem;
    padding-block: func.rem(6);
    padding-inline: func.rem(10);
    border: func.rem(1) solid c.$language-select-border;
    background-color: c.$language-select-bg;
    display: grid;
    grid-template-columns: 1fr 1fr;
    column-gap: 1.5em;
    row-gap: 0.35em;
    color: c.$white;
    translate: 0 calc(v.$font-size-user-settings-page-section-heading * -1);
  }

  &__language-select-list-item {
    word-wrap: break-word;
    cursor: pointer;
    &:where(:hover) {
      text-decoration: underline;
    }
  }

  &__learn-more-btn {
    padding: 0;
    border: none;
    outline-offset: 0.25em;
    background: none;
    font: inherit;
    font-weight: 500;
    color: inherit;
    cursor: pointer;
  }

  &__game-handle-section {
    margin-bottom: calc(v.$font-size-user-settings-page-section-heading * 2);
  }

  &__game-handle-text {
    margin-bottom: 1em;
  }

  &__game-handle-warning-info-container {
    margin-bottom: v.$font-size-user-settings-page-section-heading;
    @include flex(row, space-between, center);
    gap: 0.5rem;
    font-size: v.$font-size-user-settings-page-warning-text;
    color: c.$white;
    & > * {
      flex-grow: 1;
    }
    & .available {
      color: c.$available-color;
    }
  }

  &__game-handle-length {
    text-align: end;
  }

  &__game-handle-warning-info-wrapper {
    @include flex(row, flex-start, center);
    gap: 0.5em;
  }

  &__maturity-section {
    margin-bottom: calc(v.$font-size-user-settings-page-section-heading * 2);
  }

  &__text-box {
    margin-bottom: 1em;
    padding: func.rem(7) func.rem(10);
    background-color: c.$profile-edit-maturity-ratings-bg;
    text-transform: capitalize;
  }

  &__kids-badge {
    margin-right: 0.5em;
  }

  &__maturity-text {
    margin-top: v.$font-size-user-settings-page-section-heading;
    margin-bottom: calc(v.$font-size-user-settings-page-section-heading * 2);
  }

  &__autoplay-wrapper {
    position: relative;
    @include flex(row, flex-start, center);
    &:not(:first-child) {
      margin-top: calc(v.$user-settings-checkbox-gap * 3);
    }
  }

  &__autoplay-checkbox {
    appearance: none;
    &::before {
      position: absolute;
      content: "";
      width: v.$user-settings-checkbox-size;
      aspect-ratio: 1/1;
      border: func.rem(1) solid c.$gray-text;
      translate: 0 -50%;
      background-color: transparent;
    }
    &::after {
      position: absolute;
      content: "\2713";
      width: v.$user-settings-checkbox-size;
      aspect-ratio: 1/1;
      translate: 5% -55%;
      font-size: v.$user-settings-checkbox-mark-size;
      color: c.$gray-text;
      display: none;
    }
    &:checked::after {
      display: block;
    }
    &:focus-visible::before {
      outline: auto;
    }
  }

  &__autoplay-checkbox-label {
    margin-left: calc(v.$user-settings-checkbox-size + v.$user-settings-checkbox-gap);
  }

  &__confirmation-section {
    margin-top: calc(v.$font-size-user-settings-page-section-heading * 1.5);
    @include flex();
    row-gap: 1rem;
    flex-wrap: wrap;
  }

  &__confirmation-btn,
  &__maturity-edit-btn {
    padding: 0.5em 1.5em;
    border: func.rem(1) solid c.$gray-text;
    outline: none;
    background-color: transparent;
    color: c.$gray-text;
    cursor: pointer;
    &:where(:hover, :focus-visible) {
      color: c.$white;
      border-color: c.$white;
    }
  }
  &__confirmation-btn {
    margin-right: 1em;
    font: inherit;
    font-size: v.$font-size-user-settings-page-section-heading;
  }
  &__confirmation-btn--accent {
    background-color: c.$white;
    border-color: c.$white;
    font-weight: 500;
    color: c.$black;
    &:where(:hover, :focus-visible) {
      background-color: c.$netflix-red;
      color: c.$white;
      border-color: c.$netflix-red;
    }
    &:focus {
      outline: auto;
      outline-color: c.$black;
      outline-offset: 0;
    }
  }

  &__modal {
    margin-block: auto;
    margin-inline: auto;
    padding: 0;
    border: none;
    outline: none;
    background-color: hsl(0, 0%, 8%);
    color: c.$white;
    overflow: visible;
    @media screen and (width >= b.$desktop-account) {
      width: clamp(18.75rem, calc(0rem + 100vw), 53.75rem);
      max-width: 35%;
    }
    @media screen and (width < b.$desktop-account) {
      width: func.rem(275);
    }

    &::backdrop {
      background-color: hsl(0, 0%, 8%);
    }

    & h2 {
      margin-bottom: 0;
      line-height: 100%;
      font-weight: normal;
      @media screen and (width >= b.$desktop-account) {
        font-size: clamp(2.56rem, calc(0.02rem + 3.97vw), 6.38rem);
      }
      @media screen and (width < b.$desktop-account) {
        font-size: func.rem(40);
      }
    }

    & figure {
      margin: 0;
    }

    & figcaption {
      margin-top: 0.6em;
      text-align: center;
      color: c.$gray-text;
      //? Adding ... if it's too long
      max-width: $img-max-width;
      min-width: $img-min-width;
      width: $img-width;
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
      //?
    }
  }

  &__modal-text-wrapper {
    @include flex(row, flex-start, center);
    @media screen and (width >= b.$desktop-account) {
      gap: 1.8em;
    }
    @media screen and (width < b.$desktop-account) {
      gap: 1em;
    }

    & p {
      text-wrap: balance;
      @media screen and (width >= b.$desktop-account) {
        font-size: clamp(1rem, calc(0.26rem + 1.16vw), 1.75rem);
      }
      @media screen and (width < b.$desktop-account) {
        font-size: clamp(0.88rem, calc(0.82rem + 0.28vw), 1rem);
      }
    }
  }

  &__modal-img {
    max-width: $img-max-width;
    min-width: $img-min-width;
    width: $img-width;
    white-space: nowrap;
    border-radius: func.rem(4);
  }

  &__modal-btn-wrapper {
    & a,
    & button {
      margin-top: 1em;
      font-weight: 500;
      @media screen and (width >= b.$desktop-account) {
        font-size: clamp(1rem, calc(0.26rem + 1.16vw), 1.75rem);
      }
      @media screen and (width < b.$desktop-account) {
        font-size: v.$font-size-body;
      }
    }
  }
}

hr {
  margin: 0;
  border-bottom: 0;
  border-right: 0;
  border-left: 0;
  border-color: c.$gray-text;
  border-radius: 100vw;
}

.arrow {
  position: absolute;
  height: 0;
  width: 0;
  top: 44%;
  right: func.rem(10);
  border-color: #fff transparent transparent;
  border-style: solid;
  border-width: func.rem(5) func.rem(5) 0;
}

body.open-modal {
  overflow: hidden;
}
